webpackJsonp([0xde61b96395a3],{405:function(n,s){n.exports={data:{markdownRemark:{html:'<p><a href="https://godoc.org/github.com/appbaseio/go-appbase/">go-appbase</a> is a universal Golang client library for working with the appbase.io database.</p>\n<p>It can:</p>\n<ul>\n<li>Index new documents or update / delete existing ones.</li>\n<li>Stream updates to documents, queries or filters using <code class="gatsby-code-text">http-streams</code>.</li>\n</ul>\n<p>It can’t:</p>\n<ul>\n<li>Configure mappings, change analyzers, or capture snapshots. These are provided by Elasticsearch client libraries. We recommend the golang <a href="https://olivere.github.io/elastic/">elastic</a> library by Olivere.</li>\n</ul>\n<p><a href="https://appbase.io">Appbase.io - the database service</a> is opinionated about cluster setup and hence doesn’t support the ElasticSearch devops APIs. See <a href="https://rest.appbase.io">rest.appbase.io</a> for a full reference on the supported APIs.</p>\n<p>This is a quick start guide to whet the appetite with the possibilities of data streams. The full client API reference can be found <a href="https://godoc.org/github.com/appbaseio/go-appbase/">here</a>.</p>\n<h2 id="creating-an-app"><a href="#creating-an-app" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Creating an App</h2>\n<p>This gif shows how to create an app on appbase.io, which we will need for this quickstart guide.</p>\n<p><img src="https://i.imgur.com/r6hWKAG.gif"></p>\n<p>Log in to <span class="fa fa-external-link"></span> <a href="https://dashboard.appbase.io/">appbase.io dashboard</a>, and create a new app.</p>\n<p>For this tutorial, we will use an app called <code class="gatsby-code-text">newstreamingapp</code>. The credentials for this app are <code class="gatsby-code-text">meqRf8KJC:65cc161a-22ad-40c5-aaaf-5c082d5dcfda</code>.</p>\n<blockquote>\n<p>Note <i class="fa fa-info-circle"></i></p>\n<p>appbase.io uses <strong>HTTP Basic Auth</strong> for authenticating requests.</p>\n</blockquote>\n<h2 id="import-go-appbase"><a href="#import-go-appbase" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Import go-appbase</h2>\n<p>We will fetch and install the <strong>go-appbase</strong> lib using git.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">go get -t github.com/appbaseio/go-appbase</code></pre>\n      </div>\n<p>Adding it in the project should be a one line import syntax.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">import &quot;github.com/appbaseio/go-appbase&quot;</code></pre>\n      </div>\n<p>To write data or stream updates from <a href="https://appbase.io">appbase.io</a>, we need to first create a reference object. We do this by passing the appbase.io API URL, app name, and credentials into the <code class="gatsby-code-text">Appbase</code> constructor:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go">client<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> <span class="token function">NewClient</span><span class="token punctuation">(</span><span class="token string">"https://scalr.api.appbase.io"</span><span class="token punctuation">,</span> <span class="token string">"meqRf8KJC"</span><span class="token punctuation">,</span> <span class="token string">"65cc161a-22ad-40c5-aaaf-5c082d5dcfda"</span><span class="token punctuation">,</span> <span class="token string">"newstreamingapp"</span><span class="token punctuation">)</span>\nerr <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// Import `fmt` package before printing</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Client created"</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<h2 id="storing-data"><a href="#storing-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Storing Data</h2>\n<p>Once we have the reference object (called <code class="gatsby-code-text">client</code> in this tutorial), we can insert any JSON data into it with the <code class="gatsby-code-text">Index()</code> method.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go"><span class="token keyword">const</span> jsonObject <span class="token operator">=</span> <span class="token string">`{\n\t"department_name": "Books",\n\t"department_name_analyzed": "Books",\n\t"department_id": 1,\n\t"name": "A Fake Book on Network Routing",\n\t"price": 5595\n}`</span>\n</code></pre>\n      </div>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go">result<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Body</span><span class="token punctuation">(</span>jsonObject<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Data Inserted. ID: "</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span>ID<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>where <code class="gatsby-code-text">type: &#39;books&#39;</code> indicates the collection (or table) inside which the data will be stored and the<code class="gatsby-code-text">id: &quot;1&quot;</code> is a unique identifier of the data.</p>\n<blockquote>\n<p>Note <span class="fa fa-info-circle"></span></p>\n<p>appbase.io uses the same APIs and data modeling conventions as <a href="https://www.elastic.co/products/elasticsearch">ElasticSearch</a>. A <strong>type</strong> is equivalent to a collection in MongoDB or a table in SQL, and a <strong>document</strong> is similar to the document in MongoDB or a row in SQL.</p>\n</blockquote>\n<h2 id="geting-or-streaming-data"><a href="#geting-or-streaming-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>GETing or Streaming Data</h2>\n<p>Unlike typical databases that support GET operations (or Read) for fetching data and queries, appbase.io operates on both GET and stream modes.</p>\n<h3 id="getting-a-document-back"><a href="#getting-a-document-back" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Getting a Document Back</h3>\n<p>We will first apply the GET mode to read our just inserted object using the <code class="gatsby-code-text">Get()</code> method.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// MarshalIndent for pretty printing Json</span>\ndocument<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Document: "</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">", "</span><span class="token punctuation">,</span> <span class="token string">"Id: "</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>should print:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">Document: {\n\t&quot;department_name&quot;: &quot;Books&quot;,\n\t&quot;department_name_analyzed&quot;: &quot;Books&quot;,\n\t&quot;department_id&quot;: 1,\n\t&quot;name&quot;: &quot;A Fake Book on Network Routing&quot;,\n},\nId: &quot;1&quot;</code></pre>\n      </div>\n<h3 id="subscribing-to-a-document-stream"><a href="#subscribing-to-a-document-stream" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Subscribing to a Document Stream</h3>\n<p>Now let’s say that we are interested in subscribing to all the state changes that happen on a document. Here, we would use the <code class="gatsby-code-text">GetStream()</code> method over <code class="gatsby-code-text">Get()</code>, which keeps returning new changes made to the document.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go">response<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">GetStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">for</span> <span class="token punctuation">{</span>\n\tdata<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\t<span class="token comment">// MarshalIndent for pretty printing JSON</span>\n\tdocument<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>\n\t<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\t\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n\t<span class="token punctuation">}</span>\n\tfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Document: "</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">", Id: "</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>Don’t be surprised if you don’t see anything printed, <code class="gatsby-code-text">GetStream()</code> only returns updates made to the document after you have subscribed.</p>\n<h3 id="observe-the-updates-in-realtime"><a href="#observe-the-updates-in-realtime" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Observe the Updates in Realtime</h3>\n<p>Let’s see live updates in action. We will modify the book price in our original <code class="gatsby-code-text">jsonObject</code> variable from 5595 to 6034 and apply <code class="gatsby-code-text">Index()</code> again.</p>\n<p>For brevity, we will not show the <code class="gatsby-code-text">Index()</code> operation here.</p>\n<p>GetStream() Response:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go">Document<span class="token punctuation">:</span> <span class="token punctuation">{</span>\n\t<span class="token string">"department_name"</span><span class="token punctuation">:</span> <span class="token string">"Books"</span><span class="token punctuation">,</span>\n\t<span class="token string">"department_name_analyzed"</span><span class="token punctuation">:</span> <span class="token string">"Books"</span><span class="token punctuation">,</span>\n\t<span class="token string">"department_id"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\t<span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"A Fake Book on Network Routing"</span><span class="token punctuation">,</span>\n\t<span class="token string">"price"</span><span class="token punctuation">:</span> <span class="token number">6034</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span>\nId<span class="token punctuation">:</span> <span class="token string">"1"</span>\n</code></pre>\n      </div>\n<p>In the new document update, we can see the price change (5595 -> 6034) being reflected. Subsequent changes will be streamed as JSON objects.</p>\n<p><code class="gatsby-code-text">Note:</code> Appbase always streams the final state of an object, and not the diff b/w the old state and the new state. You can compute diffs on the client side by persisting the state using a composition of (_type, _id) fields.</p>\n<h2 id="streaming-rich-queries"><a href="#streaming-rich-queries" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Streaming Rich Queries</h2>\n<p>Streaming document updates are great for building messaging systems or notification feeds on individual objects. What if we were interested in continuously listening to a broader set of data changes? The <code class="gatsby-code-text">SearchStream()</code> method scratches this itch perfectly.</p>\n<p>In the example below, we will see it in action with a <code class="gatsby-code-text">match_all</code> query that returns any time a new document is added to the type ‘books’ or when any of the existing documents are modified.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go"><span class="token keyword">const</span> matchAllQuery <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`{"query":{"match_all":{}}}`</span>\nresponse<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">SearchStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Body</span><span class="token punctuation">(</span>matchAllQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Now we index another object.</span>\n<span class="token keyword">const</span> anotherBook <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`{"department_name": "Books", "department_name_analyzed": "Books", "department_id": 2, "name": "A Fake Book on Load balancing", "price": 7510}`</span>\n<span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Id</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Body</span><span class="token punctuation">(</span>anotherBook<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// This should trigger a new streaming match.</span>\ndata<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Id: "</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>\n\n<span class="token comment">// MarshalIndent for pretty printing JSON</span>\ndocument<span class="token punctuation">,</span> err <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">MarshalIndent</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>Source<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"  "</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"error:"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Document: "</span><span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>Response when a new data changes:</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">Id: &quot;3&quot;\nDocument: {\n\t&quot;department_name&quot;: &quot;Books&quot;,\n\t&quot;department_name_analyzed&quot;: &quot;Books&quot;,\n\t&quot;department_id&quot;: 2,\n\t&quot;name&quot;: &quot;A Fake Book on Load balancing&quot;,\n\t&quot;price&quot;: 7510\n}</code></pre>\n      </div>\n<p><code class="gatsby-code-text">Note:</code> Like <code class="gatsby-code-text">GetStream()</code>, <code class="gatsby-code-text">SearchStream()</code> subscribes to the new matches.</p>\n<h2 id="streaming-rich-queries-to-a-url"><a href="#streaming-rich-queries-to-a-url" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Streaming Rich Queries to a URL</h2>\n<p><code class="gatsby-code-text">SearchStreamToURL()</code> streams results directly to a URL instead of streaming back. In the example below we will see with a <code class="gatsby-code-text">match_all</code> query that sends anytime a new document is added to the type <code class="gatsby-code-text">books</code> to an URL.</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-go"><code class="gatsby-code-go"><span class="token comment">// Similar to NewClient, we will instiate a webhook instance with appbase.NewWebhook()</span>\nwebhook <span class="token operator">:=</span> appbase<span class="token punctuation">.</span><span class="token function">NewWebhook</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// Webhook instancess need to have a URL, method and body (which can be string or a JSON object)</span>\nwebhook<span class="token punctuation">.</span>URL <span class="token operator">=</span> <span class="token string">"https://www.mockbin.org/bin/cd6461ab-468f-42f5-865f-4eed22daae95"</span>\nwebhook<span class="token punctuation">.</span>Method <span class="token operator">=</span> <span class="token string">"POST"</span>\nwebhook<span class="token punctuation">.</span>Body <span class="token operator">=</span> <span class="token string">"hellowebhooks"</span>\n<span class="token keyword">const</span> matchAllQuery <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">`{"query":{"match_all":{}}}`</span>\n\nresponse<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">SearchStreamToURL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token string">"books"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>matchAllQuery<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">AddWebhook</span><span class="token punctuation">(</span>webhook<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\n\nstopSearchStream<span class="token punctuation">,</span> err <span class="token operator">:=</span> response<span class="token punctuation">.</span><span class="token function">Stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span>\n\tlog<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>\n\t<span class="token keyword">return</span>\n<span class="token punctuation">}</span>\nfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>Id <span class="token operator">==</span> stopSearchStream<span class="token punctuation">.</span>Id<span class="token punctuation">)</span>\n</code></pre>\n      </div>\n<p>SearchStreamToURL() response</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-text"><code class="gatsby-code-text">{\n\ttrue\n}</code></pre>\n      </div>\n<p>In this tutorial, we have learnt how to index new data and stream both individual data as well as query results. Go check out the full Golang client reference over <a href="https://godoc.org/github.com/appbaseio/go-appbase/">here</a>.</p>',
frontmatter:{title:"Golang Quickstart",next:null,prev:"rest-quickstart.html",nextTitle:null,prevTitle:"REST API: Quickstart"},fields:{path:"docs/golang/quickstart.md",slug:"go-quickstart.html"}}},pathContext:{slug:"go-quickstart.html"}}}});
//# sourceMappingURL=path---go-quickstart-html-ec0efa8ec5aac8460671.js.map